[{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/categories/ios/","section":"Categories","summary":"","title":"IOS","type":"categories"},{"content":"Welcome to my knowledge base.\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/","section":"PPSW.ASIA","summary":"","title":"PPSW.ASIA","type":"page"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"17 June 2025","externalUrl":null,"permalink":"/tags/widget-extension/","section":"Tags","summary":"","title":"Widget Extension","type":"tags"},{"content":" 系统要求 # iOS 14及以上\n三种显示模式 # systemSmall(2x2)、systemMedium (4x2)、systemLarge(4x4)\n创建Widget # 官方文档: https://developer.apple.com/documentation/widgetkit/creating-a-widget-extension\n创建方式1： Xcode \u0026gt; File \u0026gt; New \u0026gt; Target\n创建方式2：Xcode \u0026gt; 选中项目工程 -\u0026gt; Editor \u0026gt; Add Target\n信息填写：\nProduct Name : 除了不要直接命名Widget, 其他的任意，一般我们取名Widgets 或者应用名+Widgets, 比如：Widgets, MyAppWidgets , MusicAppWidgets等等 Team: 有团队就勾选，不勾选也可以在工程中去设置 Organization Identifier: 有就写你自己的组织名称，测试就随意写 勾选：Include Live Activity、Include Control、Include Configuration App Intent 文件结构：\n文件名是根据Product Name自动生成带这个前缀的文件名，假设我创建时的Product Name为 Widgets, 那么自动生成的文件名如下：\nWidgetsBundle.swift : 入口文件 AppIntent.swift: 意图文件 Widgets.swift: 默认的示例文件，这个作为参考，自己可另外创建相同类型文件来自定义自己的Widget界面元素 WidgetsControl.swift ：组件控制, 这个系统要求iOS18+才支持 WidgetsLiveActivity.swift: 灵动岛活动 示例说明：\n我们以音乐播放器为示例，创建了项目\nWidget入口文件 # import WidgetKit import SwiftUI @main struct WidgetsBundle: WidgetBundle { var body: some Widget { //可以添加最多5个Widget, 每个可以设置3个显示模式 PlayerStandardWidget() //PlayerRichWidget() //PlayerOtherWidget() //WidgetsLiveActivity() } } 在body中可以创建最多5个Widget, 每个可以设置3个显示模式\nAppIntent意图文件 # 定义播放器三个操作意图：PlayerPlayPrevIntent、PlayerPlayPauseIntent、PlayerPlayNextIntent\nimport WidgetKit import AppIntents @available(iOS 17.0, *) struct ConfigurationAppIntent: WidgetConfigurationIntent { static var title: LocalizedStringResource = \u0026#34;Configuration\u0026#34; static var description = IntentDescription(\u0026#34;This is an example widget.\u0026#34;) // An example configurable parameter. @Parameter(title: \u0026#34;Favorite Emoji\u0026#34;, default: \u0026#34;😃\u0026#34;) var favoriteEmoji: String } //以下为播放器的：播放上一首，播放暂停，播放下一首意图操作 @available(iOS 16, *) struct PlayerPlayPrevIntent: AppIntent { static var title: LocalizedStringResource = \u0026#34;PlayerPlayPrevIntent\u0026#34; func perform() async throws -\u0026gt; some IntentResult { //触发移除后会自动调用这个方法，执行自己的操作事件逻辑 AppGroupsShared.setValue(\u0026#34;playPrev\u0026#34;, forKey: DataKeys.udKey_control_command) return .result() } } @available(iOS 16.0, *) struct PlayerPlayPauseIntent: AppIntent { static var title: LocalizedStringResource = \u0026#34;PlayerPlayPauseIntent\u0026#34; func perform() async throws -\u0026gt; some IntentResult { AppGroupsShared.setValue(\u0026#34;togglePlayPause\u0026#34;, forKey: DataKeys.udKey_control_command) return .result() } } @available(iOS 16, *) struct PlayerPlayNextIntent: AppIntent { static var title: LocalizedStringResource = \u0026#34;PlayerPlayPauseIntent\u0026#34; func perform() async throws -\u0026gt; some IntentResult { AppGroupsShared.setValue(\u0026#34;playNext\u0026#34;, forKey: DataKeys.udKey_control_command) return .result() } } 创建自定义Widget # 新建一个 PlayerStandardWidget.swift的文件\n刷新Widget方式 # WidgetCenter.shared.reloadTimelines(ofKind:\u0026#34;XXX\u0026#34;) WidgetCenter.shared.reloadAllTimelines() 可以刷新指定widget, 也可以直接刷新所有。\n参考资料 # https://www.jianshu.com/p/40e438b40a0b\nhttps://segmentfault.com/a/1190000037602578?utm_source=sf-related\n官方示例下载参考 # https://developer.apple.com/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations\nhttps://developer.apple.com/documentation/swiftui/backyard-birds-sample\n","date":"17 June 2025","externalUrl":null,"permalink":"/posts/ios/widget/","section":"Posts","summary":"Widget Extension 是 iOS 14+ 系统提供的桌面小组件开发框架，可以在主屏幕和锁屏界面显示应用的重要信息和交互功能,支持多种尺寸和布局,让用户无需打开应用即可快速访问关键内容。","title":"Widgets桌面小组件开发","type":"posts"},{"content":" 一、介绍说明 # 子曰：“工欲善其事，必先利其器。\n作为新手，如果不了解和熟悉工具的使用的话，你会发现你纯手写代码老费劲了，这样你会对学习一门新的语言感到非常痛苦。\n二、AI智能辅助扩展和软件 # AI辅助软件更新很快，层出不穷！推荐几款：\n1.TONGYI Lingma（通义灵码，免费的）\n官方网站：https://tongyi.aliyun.com/lingma\n通义灵码是由阿里云开发的AI编码辅助工具，它是GitHub Copilot的一个免费替代品。通义灵码可以直接在JetBrains系列的IDE或Visual Studio Code的插件市场上搜索并安装，安装过程简便。该工具能够根据开发者的编码上下文自动提供代码提示和建议，提升编码效率。用户只需按Tab键即可采纳这些建议，无需复杂的配置过程。\n2.Comate\n官方网站：https://comate.baidu.com\n3.Marscode\n官方网站：https://www.marscode.cn/\n字节跳动公司\n4.Github Copilot (有条件的付费)\nGitHub Copilot是GitHub与OpenAI合作开发的一款革命性的AI辅助编程工具。它利用机器学习技术，根据开发者正在编写的代码自动完成注释和代码片段，大大减少了手动编码的工作量。Copilot支持多种编程语言，能够提高编码速度和质量，但需要订阅付费使用。\n5.Tabnine（有条件的付费）\nTabnine是一个非常受欢迎的AI代码补全工具，适合各种水平的开发者使用。它提供高度个性化的代码建议，能够根据用户的编码习惯和项目代码模式进行调整。Tabnine支持多种编程语言和IDE，其特点在于强大的隐私保护，允许用户选择本地部署或云部署，确保代码数据的私密性。用户反馈显示Tabnine在提高编码速度、减少重复劳动方面表现出色，同时它的代码解释、测试生成、文档生成和错误修复功能也备受好评。Tabnine既有免费版本也有增强功能的Pro版本，适用于个人和企业用户。\n6.Cursor (有条件的付费)\nhttps://cursor.com\n这些工具均致力于通过AI技术优化编程工作流程，提升开发者的工作效率。选择合适的工具取决于个人或团队的需求，包括预算、隐私要求、支持的开发环境等因素。\n7.Trae(字节跳动目前免费)\nhttps://trae.ai , 国产平替cursor\n优先选择最新技术和功能，选择付费的版本。支持GPT最新的GPT模型，上下文识别生成，上传图片识别生成等高级功能。\n三、开发必装的扩展 # Flutter Widget Snippets # 快捷代码提示生成\nFlutter related snippets # Snippet Description fstful StatefulWidget snippet. This is an alternative of stful fstless StatelessWidget snippet. This is an alternative of stless fscaff Scaffold widget snippet fedgall EdgeInsets widget snippet with named constructor all fedgonly EdgeInsets widget snippet with named constructor only ftxt Text widget snippet finitlf Flutter initState lifecycle method snippet fic Flutter Icon widget snippet fcont Flutter Container widget snippet fcent Flutter Center widget snippet frow Flutter Row widget snippet fcol Flutter Column widget snippet fex Expand widget snippet fszbw SizedBox widget snippet with just width argument fszbh SizedBox widget snippet with just height argument fszb SizedBox widget with width and height arguments fedgsym EdgeInsets widget with named constructor symmetric fedgsymv EdgeInsets widget with named constructor symmetric with vertical parameter fedgsymh EdgeInsets widget with named constructor symmetric with horizontal parameter fimpmat Add material\u0026rsquo;s package import statement fstream Display a StreamBuilder widget felbtn Flutter ElevatedButton snippet Dart related snippets # Snippet Description dvar Dart variable declaration using var dfinal Dart variable declaration using final dconst Dart variable declaration using const dinvar Dart Public Instance variable snippet dprinvar Dart Private instance variable snippet dmt Dart public method snippet dprmt Dart private method snippet darr Dart public arrow function snippet dprarr Dart private arrow function snippet dopnctor Dart optional named parameters constructor snippet dlist Dart List collection snippet dmap Dart Map collection snippet dset Dart Set collection snippet dgetarr Dart arrow function getter snippet dimpas Dart import as snippet dimpshow Dart import show snippet dimplazy Dart import deffered as snippet dimphide Dart import hide snippet dexhide Dart export hide snippet dexshow Dart export show snippet dconvert Dart convert lib import snippet dimpmeta Add meta package import statement dan Add a Dart anonymous function dcla Add Dart Class snippet dclae Add Dart Class snippet with extends keyword Flutter Bloc pattern snippets # Snippet Description fblocprov Flutter bloc provider snippet JSON formatter # json格式化: https://github.com/clemenspeters/vscode-extension-format-json\n快捷命令：\n按下 Cmd + Shift + P 输入 Format JSON并选择.\nPaste JSON as Code 模型对象生成 # 粘贴JSON，生成各种语言的对象模型：https://github.com/karosLi/quicktype-vscode-yymodel\nFlutter Intl国际化生成 # 国际化，输入命令可以跨界生成国际化代码\nFlutter Intl Text Assistance # 悬浮批量快捷显示国际化内容\nFlutter Assets Gen # 应用资源生成，比如讲图片资源文件放到项目根目录assets/images中，可生成assets.dart类，这样就不用自己手动一个一个配置了。\nFlutter widget wrap # Press Alt + C to wrap inside Container or press Alt + S to wrap inside Stack. 按下快捷键，自动包裹到容器 四、可生成式工具软件 # 图标生成 # 浏览器搜索：App icon generator， 前提是要准备一个1024x1024的图标，图标制作可以使用即时设计\n应用资源生成 # 使用插件工具：Flutter Assets Gen, Github: https://github.com/weekitmo/flutter-assets-gen\n工具命令 # 在vscode中，按下Command + Shift + P, 输入 Flutter Assets自动检索功能菜单\nFlutter Assets: Watch 监听，目录下有变化自动生成 Flutter Assets: Stop Watch， 停止监听 Flutter Assets: Generate 手动生成 前提要求 # assets 目录下的文件目录全部都要用小写，命名语义化一点，乱命名的话会导致生成出来的代码会很奇怪，不舒适，比如：\n/// Assets for assetsImagesTbAiquotes13x /// assets/images/tb_aiquotes_1@3x.png static const String assetsImagesTbAiquotes13x = \u0026#34;assets/images/tb_aiquotes_1@3x.png\u0026#34;; 修改为：assets/images/tabbar_aiquotes_on.png , 然后重新执行 Flutter Assets: Generate\n/// Assets for assetsImagesTabbarAiquotesOn /// assets/images/tabbar_aiquotes_on.png static const String assetsImagesTabbarAiquotesOn = \u0026#34;assets/images/tabbar_aiquotes_on.png\u0026#34;; 尽可能的用单词和下划线去组合，然后生成的代码会以驼峰命名生成，使用时会更清楚。\n使用步骤 # 前面我们构建了目录，所以我们要在\nStep 1 在项目根目录构建assets目录\nassets 资源包 ppkit 个人通用资源 images 图片资源 icons 图标资源 files 文件资源 jsons json文件资源 Step 2. 在项目pubspec.yaml下最后添加 ：\nflutter_assets: assets_path: assets/ output_path: lib/configs/ filename: assets.dart field_prefix: classname: R field_prefix为可选字段，如果想去掉assets前缀，则提供一个空，默认为assets（推荐设置为空）\nclass Assets { Assets._(); //有前缀 static const String assetsImagesTabbarAiquotesOn = \u0026#34;assets/images/tabbar_aiquotes_on.png\u0026#34;; //去掉前缀 static const String imagesTabbarAiquotesOn = \u0026#34;assets/images/tabbar_aiquotes_on.png\u0026#34;; } classname 为可选，默认是Assets, 如果设置了，比如R, 这种是android开发习惯用法， R是Resource简写（推荐设置简写）\nclass R { R._(); //有前缀 static const String assetsImagesTabbarAiquotesOn = \u0026#34;assets/images/tabbar_aiquotes_on.png\u0026#34;; //去掉前缀 static const String imagesTabbarAiquotesOn = \u0026#34;assets/images/tabbar_aiquotes_on.png\u0026#34;; } Step3. 执行 Flutter Assets: Generate\n执行完以后，会自动生成文件， 路径： lib/configs/assets.dart\nStep4.使用Assets对象\nimport \u0026#39;configs/assets.dart\u0026#39;; /// example1: Image.asset(R.imagesTabbarAiquotesOn, height: 30, width: 30), /// example2R Image(image: AssetImage(R.imagesTabbarAiquotesOn,), height: 30, width: 30), 使用建议 # 尽可能的去规范Assets的目录结构和文件命名结构，这样自己使用的过程中也会很舒适。\n模型对象代码生成 # 使用 json_serializable\n如果用json生成，可以用上面的Paste JSON as Code 插件工具\n国际化代码生成 # 使用 Flutter Intl 插件\n五、自定义自己的代码 # 在日常开发中，为了避免手动重复的敲自己日常使用的代码，可以将代码设置成代码提示块，这样可以快速的生成代码。\n存储位置 # 在macOS系统的VSCode中，自定义代码块存储在\n/Users/xiaopin/Library/Application Support/Code/User/snippets\n创建全局的代码块 # 打开vscode\n按下快捷键 Ctrl+Shift+P打开命令面板\n输入Configure User Snippets\n选择 新建全局代码块片段文件 (New Gloabl Snippets file)\n输入文件名称，比如 dartprint, 然后会自动打开 dartprint.code-snippets文件进行编辑\n{ \u0026#34;Dart Singleton Class\u0026#34;: { \u0026#34;scope\u0026#34;: \u0026#34;dart\u0026#34;, \u0026#34;prefix\u0026#34;: \u0026#34;xp_singleton_class\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;class ${1:SingletonName} {\u0026#34;, \u0026#34; static final ${1:SingletonName} _instance = ${1:SingletonName}._internal();\u0026#34;, \u0026#34; factory ${1:SingletonName}() =\u0026gt; _instance;\u0026#34;, \u0026#34; ${1:SingletonName}._internal();\u0026#34;, \u0026#34;}\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;Generate a Singleton class in Dart\u0026#34; } } Dart Singleton Class: 输入prefix时 , 后面的提示说明\nscope: 设置在什么语言中可以使用\nprefix: 使用时输入的关键字, 然后回自动提示\n也可以选择特定语言的json配置文件，内容配置和 dartprint.code-snippets 一致。比如我要配置dart语言的，会自动生成一个dart.json 的文件，比如以下我配置了2个代码块提示：\n{ \u0026#34;Dart Print\u0026#34;: { \u0026#34;scope\u0026#34;: \u0026#34;dart\u0026#34;, \u0026#34;prefix\u0026#34;: \u0026#34;xp_print\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;print(\u0026#39;${1:message}\u0026#39;);\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;Dart Print\u0026#34; }, \u0026#34;Dart Singleton Class\u0026#34;: { \u0026#34;scope\u0026#34;: \u0026#34;dart\u0026#34;, \u0026#34;prefix\u0026#34;: \u0026#34;xp_singleton_class\u0026#34;, \u0026#34;body\u0026#34;: [ \u0026#34;class ${1:SingletonName} {\u0026#34;, \u0026#34; static final ${1:SingletonName} _instance = ${1:SingletonName}._internal();\u0026#34;, \u0026#34; factory ${1:SingletonName}() =\u0026gt; _instance;\u0026#34;, \u0026#34; ${1:SingletonName}._internal();\u0026#34;, \u0026#34;}\u0026#34; ], \u0026#34;description\u0026#34;: \u0026#34;Generate a Singleton class in Dart\u0026#34; } } 简短的代码块可以配置到一起，太长的，单独配置一个。\n除了dart.json, 一般日常我们还可以配置其他语言或者文件模块\nswift.json go.json proto3.json dockerfile.json dockercompose.json vue.json javascript.json 等等 全局系统变量 # VSCode 提供了多个系统变量，这些变量可以在代码片段中使用。以下是一些常见的系统变量及其描述（请注意，这些变量可能会随着 VSCode 的更新而有所变化）：\nTM_CURRENT_LINE：当前光标所在行的内容。 TM_CURRENT_WORD：光标当前所在的单词（或 VSCode 定义的“单词”边界内的文本）。 TM_FILENAME：当前文档的文件名（不包括路径）。 TM_FILEPATH：当前文档的完整文件路径。 TM_DIRECTORY：当前文档所在的目录。 TM_LANGUAGE：当前文档的语言标识符。 TM_LANGUAGE_ID：与 TM_LANGUAGE 类似，但可能包含更多细节或特定的标识符。 TM_SELECTED_TEXT：当前选定的文本（如果没有选定任何文本，则为空）。 CURRENT_YEAR、CURRENT_MONTH、CURRENT_DATE、CURRENT_HOUR、CURRENT_MINUTE、CURRENT_SECOND：分别代表当前年份、月份、日期、小时、分钟和秒。 RANDOM 或 RANDOM_INT(from, to)：生成一个随机数或指定范围内的随机整数。 CLIPBOARD：剪贴板上的内容（注意：这个变量可能不是所有系统都支持）。 在代码片段的 JSON 文件中，你可以通过 ${variableName} 的格式来使用这些系统变量。例如，如果你想在代码片段中插入当前日期，你可以使用 ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}。\n日常开发，根据自己的需要进行编辑代码块，时常进行备份。\n六、代码折叠 # 打开VSCode， 按下快捷命令：Shift + Command + P , 输入 Fold, 会显示\n右边是快捷键，通过图示的快捷键即可使用快速折叠和展开代码功能\n上图是我自定义的，默认不是这个快捷键，可以自己点击设置按钮进行设置\n","date":"12 March 2025","externalUrl":null,"permalink":"/posts/flutter/003/","section":"Posts","summary":"F003-开发效率神器，vscode,cursor, 智能代码生成","title":"F003-开发效率神器","type":"posts"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/categories/flutter/","section":"Categories","summary":"","title":"Flutter","type":"categories"},{"content":"","date":"12 March 2025","externalUrl":null,"permalink":"/tags/flutter%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E8%AF%BE%E7%A8%8B/","section":"Tags","summary":"","title":"Flutter入门到精通课程","type":"tags"},{"content":" 一、Visual Studio Code安装和基本配置 # 1.1 下载安装 # 下载地址：https://code.visualstudio.com/Download\n二、VSCode用户配置 # 2.1 配置文件折叠配置 # 将一些根目录的配置文件折叠到pubspec.yaml文件下\npubspec.yaml pubspec.lock analysis_options.yaml helloapp_flutter.iml .flutter-plugins .flutter-plugins-dependencies .metadata 配置流程：\n1.按下Command + Shift + P调出命令面板\n2.输入\u0026quot;Preferences\u0026quot;, 选择\u0026quot;Preferences: Open User Settings (JSON)\u0026quot;\n如果是中文就是：\u0026quot;首选项\u0026quot; \u0026gt; \u0026quot;首选项: 打开用户设置(JSON)\u0026quot; 3.然后会打开setting.json文件，找到以下两个配置，如果没有就在里面添加如下配置：\n\u0026quot;explorer.fileNesting.enabled\u0026quot;: true, \u0026quot;explorer.fileNesting.patterns\u0026quot;: { \u0026quot;pubspec.yaml\u0026quot;: \u0026quot;*.iml,analysis_options.yaml,pubspec.lock,pubspec_overrides.yaml,.packages,.flutter-plugins,.flutter-plugins-dependencies,.metadata, LICENSE, .gitignore,.fvmrc, devtools_options.yaml,distribute_options.yaml\u0026quot; }, 意思是开启文件夹嵌套，然后配置了pubspec.yaml文件下要折叠的文件，patterns是个KeyValue对象，Key是文件名，Value是文件名，用逗号隔开，表示要折叠的文件。也可以多个文件折叠配置，比如：\n\u0026quot;explorer.fileNesting.patterns\u0026quot;: { \u0026quot;pubspec.yaml\u0026quot;: \u0026quot;*.iml,analysis_options.yaml\u0026quot;, \u0026quot;file2.yaml\u0026quot;: \u0026quot;*.iml,file2.yaml\u0026quot; } 2.2 代码折叠配置和使用 # 安装 扩展插件: #region folding for VS Code\n插件地址：https://marketplace.visualstudio.com/items?itemName=maptz.regionfolder\n添加配置 1.按下Command + Shift + P调出命令面板\n2.输入\u0026quot;Preferences\u0026quot;, 选择\u0026quot;Preferences: Open User Settings (JSON)\u0026quot;\n如果是中文就是：\u0026quot;首选项\u0026quot; \u0026gt; \u0026quot;首选项: 打开用户设置(JSON)\u0026quot; 3.然后会打开setting.json文件\n\u0026#34;maptz.regionfolder\u0026#34;: { \u0026#34;[dart]\u0026#34;: { \u0026#34;foldEnd\u0026#34;: \u0026#34;/* #endregion */\u0026#34;, \u0026#34;foldEndRegex\u0026#34;: \u0026#34;/\\\\*[\\\\s]*#endregion\u0026#34;, \u0026#34;foldStart\u0026#34;: \u0026#34;/* #region [NAME] */\u0026#34;, \u0026#34;foldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*[\\\\s]*#region[\\\\s]*(.*)[\\\\s]*\\\\*/[\\\\s]*$\u0026#34;, \u0026#34;defaultFoldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*[\\\\s]*#region[\\\\s]*default\\\\s(.*)[\\\\s]*\\\\*/[\\\\s]*$\u0026#34;, \u0026#34;foldDefinitions\u0026#34;: [ { \u0026#34;foldEndRegex\u0026#34;: \u0026#34;\\\\*+/[\\\\s]*$\u0026#34;, \u0026#34;foldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*\\\\*+\u0026#34; , \u0026#34;isFoldedByDefault\u0026#34;: true } ] } } 可以根据需要，对不同开发语言进行自定义，我们这里用的是Dart\n使用 /* #region isFirstLaunch */ bool _isFirstLaunch = true; // 默认值为 true // 同步 Getter bool get isFirstLaunch =\u0026gt; _isFirstLaunch; // 异步 Setter Future\u0026lt;void\u0026gt; setIsFirstLaunch(bool value) async { if (_isFirstLaunch != value) { // 只有在值改变时才更新 _isFirstLaunch = value; await _sp?.setBool(\u0026#39;isFirstLaunch\u0026#39;, value); } } /* #endregion */ 2.3 保存自动格式化\u0026amp;代码修复等常用配置 # 配置流程：\n1.按下Command + Shift + P调出命令面板\n2.输入\u0026quot;Preferences\u0026quot;, 选择\u0026quot;Preferences: Open User Settings (JSON)\u0026quot;\n如果是中文就是：\u0026quot;首选项\u0026quot; \u0026gt; \u0026quot;首选项: 打开用户设置(JSON)\u0026quot; 3.然后会打开setting.json文件，找到如下配置：\n自动保存格式化、代码自动修复、文件资源管理器排除显示文件目录、文件嵌套、自动保存、默认编码、\n代码折叠：VS Marketplace 链接: https://marketplace.cursorapi.com/items?itemName=maptz.regionfolder\n\u0026#34;editor.formatOnSave\u0026#34;: true, \u0026#34;editor.codeActionsOnSave\u0026#34;: { \u0026#34;source.fixAll\u0026#34;: \u0026#34;explicit\u0026#34; }, \u0026#34;files.exclude\u0026#34;: { \u0026#34;**/.idea\u0026#34;: true, \u0026#34;**/.dart_tool\u0026#34;: true, \u0026#34;**/.vscode\u0026#34;: true }, \u0026#34;explorer.fileNesting.enabled\u0026#34;: true, \u0026#34;explorer.fileNesting.patterns\u0026#34;: { \u0026#34;pubspec.yaml\u0026#34;: \u0026#34;*.iml,analysis_options.yaml,pubspec.lock,pubspec_overrides.yaml,.packages,.flutter-plugins,.flutter-plugins-dependencies,.metadata, LICENSE, .gitignore,.fvmrc, devtools_options.yaml\u0026#34; }, \u0026#34;files.autoSave\u0026#34;: \u0026#34;onFocusChange\u0026#34;, \u0026#34;files.encoding\u0026#34;: \u0026#34;utf8\u0026#34;, \u0026#34;maptz.regionfolder\u0026#34;: { \u0026#34;[dart]\u0026#34;: { \u0026#34;foldEnd\u0026#34;: \u0026#34;/* #endregion */\u0026#34;, \u0026#34;foldEndRegex\u0026#34;: \u0026#34;/\\\\*[\\\\s]*#endregion\u0026#34;, \u0026#34;foldStart\u0026#34;: \u0026#34;/* #region [NAME] */\u0026#34;, \u0026#34;foldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*[\\\\s]*#region[\\\\s]*(.*)[\\\\s]*\\\\*/[\\\\s]*$\u0026#34;, \u0026#34;defaultFoldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*[\\\\s]*#region[\\\\s]*default\\\\s(.*)[\\\\s]*\\\\*/[\\\\s]*$\u0026#34;, \u0026#34;foldDefinitions\u0026#34;: [ { \u0026#34;foldEndRegex\u0026#34;: \u0026#34;\\\\*+/[\\\\s]*$\u0026#34;, \u0026#34;foldStartRegex\u0026#34;: \u0026#34;^[\\\\s]*/\\\\*\\\\*+\u0026#34;, \u0026#34;isFoldedByDefault\u0026#34;: true } ] } }, 把这个属性设置为true开启即可\n三、常用快捷键 # 调出命令面板 # Command + Shift + P\nMarkdown编辑和预览 # Command + K, V\n查看文件大纲结构 # View(视图) \u0026gt; Open View(打开视图) \u0026gt; Outline(大纲)\n软件中英文切换 # 输入命令：Command + Shift + P，在输入面板中输入：Configure display language， 从下拉列表中选择要切换的语言\n代码折叠 # Command + F , Command H\nCommand + F , Command O\n四、开发必备的扩展安装和使用 # 4.1 安装基础扩展 # 打开VSCode左边的功能栏，点击扩展(四个小方块的图标)\nFlutter # 安装Flutter SDK后，会自带Dart SDK\nCode Spell Checker # 拼写检查, 对项目中的各种语言拼写进行检查是否正确\ngitignore # gitignore文件\n4.2 AI智能辅助扩展和软件 # Cursor (有条件的付费,推荐) Trae(字节跳动免费，平替Cursor) Github Copilot (有限免费) TONGYI Lingma（通义灵码，免费的） tabnine（有条件的付费） ","date":"11 March 2025","externalUrl":null,"permalink":"/posts/flutter/002/","section":"Posts","summary":"F002-VSCode和扩展安装配置及使用","title":"F002-VSCode和扩展安装配置及使用","type":"posts"},{"content":" 一、介绍说明 # Flutter工程师必备技能 # o 熟练掌握macOS、Windows、Linux操作系统 o 熟练掌握VsCode、Xcode、Android Studio等开发工具 o 熟练掌握Flutter, Dart, 熟练掌握各种Widget组件，且能独立开发Flutter应用 o 熟练掌握iOS Swift, Android Kotlin平台和开发语言 o 熟练掌握Flutter的布局、动画、路由、状态管理、网络请求、国际化、图片加载、本地存储、权限申请、第三方组件等 文档资料 # Flutter官方网站\nFlutter官方中文网\nFlutter实战第二版\n官方第三方插件包pub.dev\nFlutter框架结构 # 二、环境搭建(常规方式) # 1. 配置镜像 # 在中国网络环境下安装配置Flutter\n2. 安装Flutter # 官方安装配置教程\n最新稳定版Flutter SDK下载地址\nhttps://flutter.cn/docs/release/archive?tab=macos\n我的macOS下安装目录：\n/Users/xiaopin/dev/flutter\n将下载的flutter_macos_arm64_3.19.6-stable.zip解压到dev安装目录下，如果解压名字是flutter_macos_arm64_3.19.6-stable，就改成flutter\n3. 环境变量配置 # 找到并打开文件/Users/xiaopin/.zshrc, 添加以下行：\nexport PATH=/Users/xiaopin/dev/flutter/bin:$PATH export PATH=\u0026#34;$PATH\u0026#34;:\u0026#34;$HOME/.pub-cache/bin\u0026#34; export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 4.相关工具安装 # Xcode：苹果开发相关环境\nAndroid Studio：Android开发相关环境\nDevEco Studio：鸿蒙开发相关环境：\nChrome：Web开发环境\n5.查看Flutter安装情况 # 命令行输入\nflutter doctor xiaopin@PPM2-MacBook-Air ~ % flutter doctor Doctor summary (to see all details, run flutter doctor -v): [✓] Flutter (Channel stable, 3.19.6, on macOS 14.3.1 23D60 darwin-arm64, locale zh-Hans-CN) [✓] Android toolchain - develop for Android devices (Android SDK version 34.0.0) [✓] Xcode - develop for iOS and macOS (Xcode 15.2) [✓] Chrome - develop for the web [✓] Android Studio (version 2023.1) [✓] VS Code (version 1.89.0) [✓] Connected device (3 available) [✓] Network resources\n• No issues found!\n根据提示，将打叉的对应工具都安装完毕！\n6.开发工具 # Corsor(强烈推荐) Visual Studio Code 最新版本(官方推荐) Android Studio 最新版本 三、环境搭建(FVM方式) # 1.介绍说明 # FVM (Flutter Version Management) 是一个开源工具，旨在简化和管理 Flutter 的不同版本，允许开发者在一个项目中使用特定版本的 Flutter，而无需更改全局安装的 Flutter 版本。\n官方网站：https://fvm.app/documentation/getting-started\n多版本管理：\n• 支持在不同项目中使用不同的 Flutter 版本。\n• 允许轻松切换 Flutter 版本，而无需手动安装或卸载。\n项目级版本控制：\n• 每个项目可以指定一个特定的 Flutter 版本，其他项目不会受到影响。\n• 避免因 Flutter 版本更新而导致的兼容性问题。\n共享版本：\n• 同一设备上多个项目可以共享相同的 Flutter 版本，减少磁盘空间浪费。\n易于 CI/CD 集成：\n• 提供简单的工具和命令行支持，适合在 CI/CD 管道中指定 Flutter 版本。\nFVM 是管理 Flutter 多版本的强大工具，适用于团队协作和复杂项目场景，能显著提升开发效率，避免版本兼容性问题。如果你的项目需要频繁切换 Flutter 版本，或者团队中有多个项目运行在不同的版本上，FVM 是一个值得采用的工具。\n2.安装和使用 # 2.1Homebrew安装FVM # #安装命令 brew tap leoafarias/fvm brew install fvm #卸载命令 brew uninstall fvm brew untap leoafarias/fvm 查看版本\nfvm --version 2.2.配置环境变量 # # 设置 FVM 缓存路径 export FVM_CACHE_PATH=\u0026#34;$HOME/fvm_cache\u0026#34; # 启用 Git 缓存 export FVM_USE_GIT_CACHE=true # 设置 Git 缓存路径 export FVM_GIT_CACHE_PATH=\u0026#34;$HOME/fvm_git_cache\u0026#34; # 自定义 Flutter 仓库地址 export FVM_FLUTTER_URL=\u0026#34;https://github.com/flutter/flutter.git\u0026#34; # 启用特权访问 export FVM_PRIVILEGED_ACCESS=true FVM_GIT_CACHE_PATH\n•用于存储 Flutter Git 仓库的本地引用。\n•主要作用是加速 Flutter SDK 的版本切换和下载过程。\n•默认路径：~/.fvm/git_cache/。\nFVM_CACHE_PATH\n•用于存储已下载的 Flutter SDK 文件（即解压后的完整 Flutter SDK）。\n•这是实际使用 Flutter SDK 的路径。\n•默认路径：~/.fvm/versions/。\n将这两个存放到自己指定的目录中，比如我的开发环境一般都存放在/User/xiaopin/dev/ 中, 只要配置这两个就好了。\n# FVM存储路径配置 export FVM_GIT_CACHE_PATH=\u0026#34;/Users/xiaopin/flutter/fvm/gitcache/\u0026#34; export FVM_CACHE_PATH=\u0026#34;/Users/xiaopin/flutter/fvm/\u0026#34; export PATH=/Users/xiaopin/flutter/fvm/default/bin:$PATH export PATH=\u0026#34;$PATH\u0026#34;:\u0026#34;$HOME/.pub-cache/bin\u0026#34; 2.3.安装指定版本flutter # fvm install 3.24.0 2.4.在项目中指定Flutter版本 # 在项目根目录下，使用以下命令将特定的 Flutter 版本关联到该项目：\nfvm use 3.24.0 这会生成一个 .fvm 文件夹和一个 fvm_config.json 文件，用于保存项目的 Flutter 版本配置。\n2.5.运行Flutter命令 # fvm flutter run fvm flutter doctor 2.6.升级Flutter版本 # fvm install \u0026lt;new_version\u0026gt; fvm use \u0026lt;new_version\u0026gt; 2.7.卸载旧Flutter版本 # fvm remove 3.24.0 2.8. 查看已安装版本 # fvm list 3.10.0 (global) 3.13.0 (active) 2.5.3 • global：全局版本，默认在所有项目中使用。\n• active：当前项目的版本。\n2.9. 查看可安装版本 # fvm releases stable 3.13.1 3.13.0 ... beta 3.14.0-1.0.pre 3.13.0-0.3.pre ... 2.10. 清理FVM所有缓存和SDK # FVM中的destroy命令是一个强大的工具，用于完全删除FVM缓存，包括所有缓存的Flutter SDK版本。此命令对于清理空间或重置FVM设置很有用。\nfvm destroy 3. 设置默认全局Flutter版本 # fvm global 3.24.5 4. 项目单独指定Flutter版本 # fvm use 3.24.0 5. FVM 配置文件 # 在项目中，FVM 会生成两个关键文件：\n.fvm/fvm_config.json： { \u0026#34;flutterSdkVersion\u0026#34;: \u0026#34;3.13.0\u0026#34; } .gitignore 通常会忽略 .fvm/ 文件夹以避免版本冲突。\n6. FVM 的适用场景 # 1.团队协作：\n​ 确保团队成员使用相同的 Flutter 版本，避免因版本差异引发问题。\n维护旧项目： ​ 在新项目中使用最新版本的 Flutter，同时为旧项目保留其兼容的版本。\n测试与调试： ​ 快速切换 Flutter 版本以测试兼容性或复现问题。\n四、常用命令 # Flutter官方命令行文档：https://flutter.cn/docs/reference/flutter-cli\nflutter help -v # Flutter SDK bash-completion Output command line shell completion setup scripts. channel List or switch Flutter channels. config Configure Flutter settings. doctor Show information about the installed tooling. downgrade Downgrade Flutter to the last active version for the current channel. precache Populate the Flutter tool\u0026#39;s cache of binary artifacts. upgrade Upgrade your copy of Flutter. Project analyze Analyze the project\u0026#39;s Dart code. assemble Assemble and build Flutter resources. build Build an executable app or install bundle. clean Delete the build/ and .dart_tool/ directories. create Create a new Flutter project. drive Run integration tests for the project on an attached device or emulator. gen-l10n Generate localizations for the current project. pub Commands for managing Flutter packages. run Run your Flutter app on an attached device. test Run Flutter unit tests for the current project. Tools \u0026amp; Devices attach Attach to a running app. custom-devices List, reset, add and delete custom devices. daemon Run a persistent, JSON-RPC based server to communicate with devices. debug-adapter Run a Debug Adapter Protocol (DAP) server to communicate with the Flutter tool. devices List all connected devices. emulators List, launch and create emulators. install Install a Flutter app on an attached device. logs Show log output for running Flutter apps. screenshot Take a screenshot from a connected device. symbolize Symbolize a stack trace from an AOT-compiled Flutter app. flutter doctor # flutter环境诊断命令，该命令检查您的环境并在终端窗口中显示相关工具的安装情况的报告\nflutter upgrade # flutter版本升级命令\nflutter pub upgrade # 如果你修改了 pubspec.yaml 文件，或者想仅更新项目依赖的 packages，而不是同时更新 packages 和 Flutter SDK，可以选择使用下面提到的 flutter pub 命令。\nflutter pub outdated # 如果需要自动判断那些过时了的 package 依赖以及获取更新建议，现在你可以使用 outdated 命令。更多相关的信息，请参考 Dart 文档中关于 pub outdated 的说明。\nflutter pub get # flutter pub add # 添加第三方依赖\nflutter analyze # flutter create # #创建所有平台 flutter create 项目名称 #创建指定平台 flutter create --platforms=ios,android,web my_project #在已有项目中添加剩余平台 futter create . #在已有项目中添加指定平台 flutter create --platforms=android . flutter devices # 查看已连接设备\nflutter run # #在 Android 设备或模拟器上运行 Flutter 应用 flutter run -d \u0026lt;设备ID\u0026gt; #在 iOS 设备或模拟器上运行 Flutter 应用 flutter run -d \u0026lt;设备名称\u0026gt; #在 Web 浏览器上运行 Flutter 应用（这通常意味着在本地启动一个开发服务器） flutter run -d chrome flutter run -d windows flutter run -d macos flutter run -d linux #运行所有设备 flutter run -d all #运行指定多个设备，通过多开终端运行 #终端1 flutter run -d 10628645-C8D4-44E5-8A63-6EC812E129A7 #终端2 flutter run -d 00008020-000C44563A45002E flutter run lib/main.dart r：热重载 R：热重启 d：取消连接 q：终止程序 c：清除屏幕 s：屏幕截图 v：打开开发工具 h：显示所有命令 w：打印组件层级 t：打印渲染树 L：打印布局树 o：切换操作系统 b：切换显示模式 flutter build # iOS打包 flutter build ios(默认打release包) flutter build ios --release flutter build ios --debug(打Debug包) 安卓打包 flutter build apk(默认打release包) flutter build apk --release flutter build apk --debug(打Debug包) flutter build web flutter build windows 批量使用命令 # rm -rf ~/Library/Developer/Xcode/DerivedData/ flutter clean \u0026amp;\u0026amp; flutter pub get \u0026amp;\u0026amp; cd ios \u0026amp;\u0026amp; pod install \u0026amp;\u0026amp; open Runner.xcworkspace 五、自定义简洁命令 # 在 ~/.zshrc文件中加入一下内容\n####### 创建项目命令 alias fcreate=\u0026#39;flutter create\u0026#39; ####### 常用命令 alias fc=\u0026#39;flutter create\u0026#39; alias f=\u0026#39;fvm flutter\u0026#39; alias d=\u0026#39;fvm dart\u0026#39; alias fp=\u0026#39;fvm flutter pub\u0026#39; alias fpa=\u0026#39;fvm flutter pub add\u0026#39; alias fpg=\u0026#39;fvm flutter pub get\u0026#39; alias fpu=\u0026#39;fvm flutter pub upgrade\u0026#39; alias fpc=\u0026#39;fvm flutter pub cache clean\u0026#39; alias fpr=\u0026#39;fvm flutter pub cache repair\u0026#39; alias fr=\u0026#39;fvm flutter run\u0026#39; alias frd=\u0026#39;fvm flutter run --debug\u0026#39; alias frr=\u0026#39;fvm flutter run --release\u0026#39; alias fds=\u0026#39;fvm flutter devices\u0026#39; alias gm=\u0026#39;dart run build_runner build --delete-conflicting-outputs\u0026#39; alias gi=\u0026#39;dart run intl_utils:generate\u0026#39; alias fadev=\u0026#39;flutter_distributor release --name dev\u0026#39; ####### 构建打包命令 alias fb=\u0026#39;fvm flutter build\u0026#39; alias fbipa=\u0026#39;fvm flutter build ipa --obfuscate --split-debug-info=symbols/\u0026#39; alias fbapk=\u0026#39;fvm flutter build apk --obfuscate --split-debug-info=symbols/\u0026#39; alias fbapp=\u0026#39;fvm flutter build app --flavor=default --release --obfuscate --split-debug-info=symbols/ios --target-platform=ohos-arm64\u0026#39; alias fbweb=\u0026#39;fvm flutter build web\u0026#39; alias fbwin=\u0026#39;fvm flutter build windows\u0026#39; alias fbmac=\u0026#39;fvm flutter build macos\u0026#39; ####### 项目清理 cleanios() { sudo rm -rf ~/Library/Developer/Xcode/DerivedData } fcleanall() { rm -rf ~/Library/Developer/Xcode/DerivedData \u0026amp;\u0026amp; \\ fvm flutter clean \u0026amp;\u0026amp; \\ fvm flutter pub get \u0026amp;\u0026amp; \\ cd ios \u0026amp;\u0026amp; \\ rm -rf Pods \u0026amp;\u0026amp; \\ rm -rf Podfile.lock \u0026amp;\u0026amp; \\ pod install \u0026amp;\u0026amp; \\ cd .. } fclean(){ fvm flutter clean \u0026amp;\u0026amp; \\ fvm flutter pub get \u0026amp;\u0026amp; \\ } 保存后，执行\nsource ~/.zshrc 生效后可以通过快速简洁命令运行Flutter 命令。\n如果运行过程中出现冲突，先清理指定命令\n#清除指定别名 unalias fclean #清除特定函数 unset -f fclean ","date":"10 March 2025","externalUrl":null,"permalink":"/posts/flutter/001/","section":"Posts","summary":"F001-Flutter必备基础和环境安装","title":"F001-Flutter必备基础和环境安装","type":"posts"},{"content":"","date":"17 August 2024","externalUrl":null,"permalink":"/tags/avaudio/","section":"Tags","summary":"","title":"AVAudio","type":"tags"},{"content":" iOS 音频引擎 AVAudioEngine # AVAudioEngine 是 AVFoundation 框架中的核心类，用于构建音频处理图，即一系列音频单元的连接，可以实现复杂的音频处理任务。在 AVAudioEngine 中，你可以使用各种内置的音频单元 (AVAudioUnit) 来添加各种音频效果。以下是 AVAudioEngine 中可用的一些主要音频效果单元及其详细说明：\n1. AVAudioUnitTimePitch # AVAudioUnitTimePitch 是 AVFoundation 框架中的一个音频单元，用于在 AVAudioEngine 的音频处理图中实时改变音频的时间和音调。这个单元允许你独立地调整音频的速度和音高，这对于音乐制作、音频编辑和实时音频效果非常有用。\n主要功能 # 时间拉伸: AVAudioUnitTimePitch 可以改变音频的播放速度，即时间拉伸，而不改变音高。这在需要调整音频长度以匹配特定时间线的情况下很有用。 音调变化: 同时，这个单元也可以改变音频的音调（音高），而不改变播放速度。这在需要调整音频的音高以匹配其他音轨或音阶时非常有用。 独立控制: 最重要的是，AVAudioUnitTimePitch 允许你独立控制时间拉伸和音调变化，这意味着你可以只改变音高而不改变速度，或者反之亦然。 属性 # AVAudioUnitTimePitch 提供了几个关键属性来控制其行为：\npitch: 一个浮点数，表示音高的变化。1.0 表示原始音高，小于1.0表示降低音高，大于1.0表示提高音高。 timePitchAlgorithm: 一个枚举值，表示所使用的时间拉伸和音调变化算法。可以是 .varispeed（仅改变播放速度）、.advanced（高级算法，提供独立的时间和音高控制）等。 pitchCorrection: 一个整数值，表示音高的半音变化。0 表示无变化，正数表示升高音高，负数表示降低音高。 rate: 一个浮点数，表示播放速度的变化。1.0 表示正常速度，小于1.0表示慢速播放，大于1.0表示快速播放。 使用示例 # 下面是一个使用 AVAudioUnitTimePitch 的简单示例：\nimport AVFoundation let audioEngine = AVAudioEngine() let timePitchUnit = AVAudioUnitTimePitch() // 设置音调变化和播放速度 timePitchUnit.pitch = 1.5 // 提升一个半音 timePitchUnit.rate = 1.0 // 正常速度播放 // 将时间音调单元添加到音频引擎 audioEngine.attach(timePitchUnit) // 连接输入和输出节点 let inputNode = audioEngine.inputNode let outputNode = audioEngine.outputNode audioEngine.connect(inputNode, to: timePitchUnit, format: nil) audioEngine.connect(timePitchUnit, to: outputNode, format: nil) // 准备并启动音频引擎 do { try audioEngine.start() } catch { print(\u0026#34;Error starting audio engine: \\(error)\u0026#34;) } 2. AVAudioUnitReverb（混响） # 提供混响效果，可以模拟不同环境下的声音反射，用于营造空间感和深度感。\n在音频处理领域，混响（Reverb）效果用于模拟声波在封闭空间中的反射，从而给声音添加深度和空间感。不同的混响算法和插件可以模拟各种环境，从小房间到大教堂，甚至是特殊的声学效果。在 AVAudioUnitReverb 类中，Apple 提供了几种预设的混响类型，但它们并不是所有可能的混响效果。下面列举的是 AVAudioUnitReverb 类中可用的几种预设混响类型：\nSmallRoom - 模拟一个小房间的声学环境。 MediumRoom - 模拟一个中等大小房间的声学环境。 LargeRoom - 模拟一个大房间的声学环境。 MediumHall - 模拟一个中等大小的音乐厅的声学环境。 LargeHall - 模拟一个大音乐厅的声学环境。 Plate - 模拟早期的金属板混响器（plate reverb）效果。 MediumChamber - 模拟一个中等大小的录音室的声学环境。 LargeChamber - 模拟一个大录音室的声学环境。 Cathedral - 模拟大教堂的声学环境，通常有很长的尾音。 Room - 一个通用的房间混响效果，可以进一步定制。 Hall - 一个通用的大厅混响效果，可以进一步定制。 Chamber - 一个通用的小室混响效果，可以进一步定制。 LiveRoom - 模拟现场表演场地的声学环境。 除了上述预设，AVAudioUnitReverb 还允许你自定义混响的参数，例如：\nWet/Dry Mix - 控制原始干声和混响湿声的混合比例。 Decay Time - 控制混响尾音消失的时间长度。 Diffusion - 控制声波的散射程度，影响混响的密度。 Density - 控制早期反射的数量和分布。 High Frequency Damping - 控制高频混响的衰减程度。 Lowpass Filter - 控制混响信号的高频上限。 除了 AVAudioUnitReverb 提供的预设，还有许多第三方插件和软件提供了更为专业和多样化的混响效果。这些插件通常在专业音频工作站（DAWs）中使用，如 Logic Pro、Pro Tools、Ableton Live 等，提供了更高级的控制和仿真效果，例如：\nConvolution Reverb - 基于真实空间的声学响应（Impulse Response）来模拟混响。 Modulated Reverb - 添加调制效果的混响，如颤音或镶边。 Algorithmic Reverb - 使用数学算法而非真实空间的声学响应来模拟混响。 Spring Reverb - 模拟早期弹簧混响器的效果。 Ambience - 专注于模拟环境声音，如风声、雨声等。 每种混响类型都有其独特的声学特性，选择哪种类型取决于你希望达到的特定声学效果。\n参数：wetDryMix 是混响效果的湿干比参数。它表示原始信号（干信号）和混响信号（湿信号）的混合比例。值范围是 0 到 100，其中 0 表示完全干信号（无混响），100 表示完全湿信号（只有混响）。\n3. AVAudioUnitDistortion(失真效果) # 用于添加失真效果，可以产生摇滚音乐中常见的吉他放大器失真效果。\n4. AVAudioUnitEQ(均衡器) # 均衡器单元，允许你调整音频的频率响应，通过增加或减少特定频率的增益，可以调整音色和清晰度。\nAVAudioUnitEQ 是一个强大的多频段均衡器类，提供了丰富的属性和方法来调整音频信号的频率响应。以下是 AVAudioUnitEQ 及其关键属性的详细说明：\nAVAudioUnitEQ 是 AVAudioUnitEffect 的子类，用于实现多频段均衡器。它包含多个 AVAudioUnitEQFilterParameters 对象，每个对象代表一个频段。\n关键属性 # bands # 类型: [AVAudioUnitEQFilterParameters]\n说明: 这是一个数组，包含均衡器的所有频段。每个频段由 AVAudioUnitEQFilterParameters 对象表示。\n示例:\nlet eq = AVAudioUnitEQ(numberOfBands: 10)\nlet bands = eq.bands\nglobalGain # 类型: Float\n说明: 设置均衡器的全局增益，以分贝 (dB) 为单位。可以用来整体提升或降低音量。\n示例: eq.globalGain = 1.0 // 增加全局增益1dB\nAVAudioUnitEQFilterParameters # AVAudioUnitEQFilterParameters 是 AVAudioUnitEQ 的一个子类，表示均衡器的单个频段。它包含以下关键属性：\nfilterType # 类型: AVAudioUnitEQFilterType\n说明: 设置滤波器的类型。可选值包括 .parametric, .lowPass, .highPass, .resonantLowPass, .resonantHighPass, .bandPass, .bandStop, .lowShelf, .highShelf, .resonantLowShelf, .resonantHighShelf。\n示例: band.filterType = .parametric\npublic enum AVAudioUnitEQFilterType :Int{ case Parametric 参量均衡器 可以通过设置一些参量，来调节咱们均衡器的频点 case LowPass 低通滤波器 衰弱高频 case HighPass 高通滤波器 衰弱低频 case ResonantLowPass 可以引发共鸣的 低通滤波器 case ResonantHighPass 可以引发共鸣的 高通滤波器 case BandPass 带通滤波器 提升某一频率附近的信号 忽略过高 或 过低的 部分 case BandStop 与上面的相反 忽略某一频率附近的信号 case LowShelf 低架 降低整体 case HighShelf 高架 提升整体 case ResonantLowShelf 可以引发共鸣的 低架 case ResonantHighShelf可以引发共鸣的 高架 } frequency # 类型: Float\n说明: 设置滤波器的中心频率，以赫兹 (Hz) 为单位。\n示例: band.frequency = 1000.0 // 设置中心频率为1000Hz\nbandwidth # 类型: Float\n说明: 设置滤波器的带宽，以八度 (octaves) 为单位。仅适用于参数均衡器类型。\n示例: band.bandwidth = 1.0 // 设置带宽为1个八度\ngain # 类型: Float\n说明: 设置滤波器的增益，以分贝 (dB) 为单位。正值表示提升，负值表示衰减。\n示例: band.gain = 5.0 // 增加增益5dB\nbypass # 类型: Bool\n说明: 设置是否绕过此频段。true 表示绕过，false 表示启用。\n示例: band.bypass = false // 启用此频段\n示例代码 # import AVFoundation // 创建音频引擎 let audioEngine = AVAudioEngine() // 创建均衡器，设置为10个频段 let eq = AVAudioUnitEQ(numberOfBands: 10) // 配置每个频段 for i in 0..\u0026lt;eq.bands.count { let band = eq.bands[i] band.filterType = .parametric band.frequency = Float(32 * pow(2.0, Double(i))) // 设置频率 band.bandwidth = 0.5 // 设置带宽 band.gain = 0.0 // 设置增益 band.bypass = false // 启用频段 } // 设置全局增益 eq.globalGain = 1.0 // 将均衡器添加到音频引擎 audioEngine.attach(eq) // 连接均衡器到主混音器节点 audioEngine.connect(eq, to: audioEngine.mainMixerNode, format: nil) // 启动音频引擎 do { try audioEngine.start() } catch { print(\u0026#34;音频引擎启动失败: \\(error)\u0026#34;) } // 调整某个频段的增益 eq.bands[0].gain = 5.0 // 增加第一个频段的增益 5. AVAudioUnitDelay # 延迟效果器，可以创建回声效果，常用于电子音乐制作和空间感增强。\n6. AVAudioUnitCompressor(压缩器) # 压缩器，用于控制音频的动态范围，可以防止峰值过载，同时使较弱的声音更加清晰。\n7. AVAudioUnitFlanger # 镶边器，可以产生一种类似于旋转扬声器的效果，常用于创造特殊的声音质感。\n8. AVAudioUnitPhaser # 相位器，通过对音频信号的不同频率进行相位移，可以产生扫频效果。\n9. AVAudioUnitDistortionFactory(失真效果) # AVAudioUnitDistortionFactory 是 AVAudioEngine 中的一个类，它提供了一系列预设的失真效果单元。这些失真效果可以应用于音频信号，以产生不同的音色变化，尤其是在音乐制作中非常有用，例如在电吉他音轨上添加失真效果。\n以下是在 AVAudioUnitDistortionFactory 中可获得的所有预设失真单元：\nOverdrive - 这种失真类型通常模仿真空管放大器的自然过载特性，产生温暖而柔和的失真效果。 Fuzz - Fuzz 失真通常会产生更加粗糙和饱和的音色，它会将输入信号的波峰削平，导致大量谐波的产生。 Distortion - Distortion 类型的失真通常比 Overdrive 更加激进，它可以产生强烈的非线性失真效果，适合硬摇滚和重金属风格的音乐。 Saturator - Saturator 效果模拟了磁带饱和或数字剪切的特性，可以产生更细腻的失真，通常用于轻微增强音色。 Tube - 这个预设模拟了真空管设备的特性，产生温暖且富有音乐性的失真。 Soft Clip - Soft clip 效果会平滑地限制信号的峰值，避免突然的音量尖峰，同时保留信号的基本音色。 Hard Clip - Hard clip 则会更剧烈地剪切信号峰值，产生更明显的失真和削波效果。 Foldback - Foldback 失真会在信号超过一定阈值时，将信号反向折叠，产生独特的音色变化。 Wave Shaper - Wave shaper 允许对信号波形进行任意形状的变换，可以产生从轻微到极端的各种失真效果。 Bit Crusher - Bit crusher 效果通过降低音频的比特深度来产生数字噪声和失真，通常用于创造电子音乐中的粗糙质感。 Sample and Hold - Sample and Hold 效果会在随机或定期的时间间隔内“采样”信号的瞬时值，并保持该值直到下一次采样，产生断断续续的音色变化。 10. AVAudioUnitChorus # 合唱效果器，通过轻微延迟和调制信号的叠加，可以模仿多个演奏者的合奏效果。\n11. AVAudioUnitAudioUnit # 这个单元允许你加载外部的 Audio Unit 插件，极大地扩展了 AVAudioEngine 的功能，可以使用第三方音频效果和乐器。\n12. AVAudioUnitSampler # 采样器单元，用于加载和播放采样音频，可以用来构建自己的乐器。\n13. AVAudioUnitInstrument # 乐器单元，可以加载和播放 MIDI 信息，用于合成音乐。\n14. AVAudioUnitVarispeed(播放速度) # 变速单元，可以改变音频的速度和播放时间，但不会改变音调。\n15. AVAudioUnitRecorder # 录音单元，用于录制音频流到文件，可以实现实时录音功能。\n16. AVAudioUnitTimeStretch # 时间拉伸单元，可以改变音频的播放时间而不改变音调，适用于节奏调整。\n17. AVAudioUnitMIDI # MIDI 单元，用于处理 MIDI 信息，可以将 MIDI 控制信息转换为音频输出。\n18. AVAudioUnitSampler # 虽然已经提过一次，但是值得注意的是，AVAudioUnitSampler 可以作为复杂的乐器引擎使用，它支持多种触发模式和多种音色切换。\n19. AVAudioUnitGenerator # 音频生成单元，可以生成特定的音频波形，如正弦波、方波等。\n20. AVAudioUnitMixer # 混音器单元，用于混合多个音频流，可以调整各路音频的音量和平衡。\n21. AVAudioUnitEffect # 一个通用效果单元，可以作为其他效果单元的基类，但通常不会直接实例化。\n22. AVAudioUnitEQFilter # 虽然 AVAudioUnitEQ 提供了均衡器功能，但 AVAudioUnitEQFilter 提供了更细粒度的滤波器控制，可以单独设置每个频段的参数。\n使用示例 # 使用这些单元时，你需要将它们添加到 AVAudioEngine 中，并通过 connect 方法将它们连接起来形成一个处理链。例如，下面的代码展示了如何将均衡器和混响效果添加到音频引擎中：\nlet audioEngine = AVAudioEngine() let eq = AVAudioUnitEQ(numberOfBands: 3) let reverb = AVAudioUnitReverb() // 添加单元 audioEngine.attach(eq) audioEngine.attach(reverb) // 连接单元 let inputNode = audioEngine.inputNode let outputNode = audioEngine.outputNode audioEngine.connect(inputNode, to: eq, format: nil) audioEngine.connect(eq, to: reverb, format: nil) audioEngine.connect(reverb, to: outputNode, format: nil) 注意事项 # 在音频处理链中，效果的顺序会影响最终的音频输出。以下是一些常见的音频效果及其通常的排列顺序：\n动态处理（Dynamic Processing）: 包括压缩器（Compressor）、限制器（Limiter）等。这些效果通常放在最前面，以控制音频信号的动态范围。\n均衡器（Equalizer）: 用于调整音频信号的频率响应。通常在动态处理之后，以便在处理动态范围后进行频率调整。\n失真（Distortion）: 包括过载（Overdrive）、失真（Distortion）等。这些效果通常放在均衡器之后，以便在频率调整后添加失真效果。\n调制（Modulation）: 包括合唱（Chorus）、镶边（Flanger）、相位（Phaser）等。这些效果通常放在失真之后，以便在失真处理后添加调制效果。\n延迟（Delay）: 用于添加回声效果。通常放在调制效果之后，以便在调制处理后添加延迟效果。\n混响（Reverb）: 用于模拟空间效果。通常放在延迟之后，以便在延迟处理后添加混响效果。\n获取频谱信息 # 目标需求 # 如何获取音频数据的频谱信息,根据音乐的律动，实现频谱可视化柱状图振幅效果？\n思路方案 # 要实现音频频谱可视化柱状图振幅效果，你需要从音频数据中提取频谱信息。可以使用 AVAudioEngine 和 AVAudioPCMBuffer 来获取音频数据，并使用快速傅里叶变换（FFT）来计算频谱。\n以下是一个简化的示例，展示如何获取音频数据的频谱信息并实现频谱可视化柱状图振幅效果：\n获取音频数据并计算频谱 # 使用 AVAudioEngine 和 AVAudioPCMBuffer 获取音频数据。\n使用 vDSP 库中的 FFT 函数计算频谱。\nimport AVFoundation import Accelerate class SpectrumAnalyzer { private var fftSetup: FFTSetup? private var log2n: vDSP_Length var bufferSize: Int // 将访问级别更改为 internal private var window: [Float] private var outputBuffer: [Float] private var frequencyData: [Float] private var downsampleFactor: Int init(bufferSize: Int, downsampleFactor: Int = 10) { // 默认降采样因子为10 self.bufferSize = bufferSize self.downsampleFactor = downsampleFactor self.log2n = vDSP_Length(log2(Float(bufferSize))) self.fftSetup = vDSP_create_fftsetup(log2n, Int32(kFFTRadix2)) self.window = [Float](repeating: 0, count: bufferSize) vDSP_hann_window(\u0026amp;window, vDSP_Length(bufferSize), Int32(vDSP_HANN_NORM)) self.outputBuffer = [Float](repeating: 0, count: bufferSize / 2) self.frequencyData = [Float](repeating: 0, count: bufferSize / 2) } deinit { if let fftSetup = fftSetup { vDSP_destroy_fftsetup(fftSetup) } } func analyze(buffer: AVAudioPCMBuffer) -\u0026gt; [Float] { guard let fftSetup = fftSetup else { return [] } let frameCount = buffer.frameLength var realp = [Float](repeating: 0, count: Int(frameCount / 2)) var imagp = [Float](repeating: 0, count: Int(frameCount / 2)) var magnitudes = [Float](repeating: 0.0, count: Int(frameCount / 2)) realp.withUnsafeMutableBufferPointer { realpPtr in imagp.withUnsafeMutableBufferPointer { imagpPtr in var output = DSPSplitComplex(realp: realpPtr.baseAddress!, imagp: imagpPtr.baseAddress!) buffer.floatChannelData?.pointee.withMemoryRebound(to: DSPComplex.self, capacity: Int(frameCount)) { (inputData) in vDSP_ctoz(inputData, 2, \u0026amp;output, 1, vDSP_Length(frameCount / 2)) } vDSP_fft_zrip(fftSetup, \u0026amp;output, 1, log2n, FFTDirection(FFT_FORWARD)) vDSP_zvmags(\u0026amp;output, 1, \u0026amp;magnitudes, 1, vDSP_Length(frameCount / 2)) } } return downsample(magnitudes, factor: downsampleFactor) } private func downsample(_ data: [Float], factor: Int) -\u0026gt; [Float] { guard factor \u0026gt; 0 else { return data } let downsampledCount = data.count / factor var downsampledData = [Float](repeating: 0.0, count: downsampledCount) for i in 0..\u0026lt;downsampledCount { let start = i * factor let end = start + factor let sum = data[start..\u0026lt;end].reduce(0, +) downsampledData[i] = sum / Float(factor) } return downsampledData } } 绑定AVAudioEngine # 将频谱数据传递给 UI 层，更新柱状图的振幅。\n以下是一个示例代码，展示如何实现这些步骤：\nimport AVFoundation import MediaPlayer class AudioEnginePlayer { //... var onSpectrumDataAvailable: (([Float]) -\u0026gt; Void)? //... private var playerNode: AVAudioPlayerNode private var spectrumAnalyzer: SpectrumAnalyzer //... /// 播放状态 var isPlaying: Bool = false { didSet { if !isPlaying { // 如果没有播放，则所有频谱柱显示为 0 值 onSpectrumDataAvailable?([Float](repeating: 0.0, count: 24)) } } } init() { //... playerNode = AVAudioPlayerNode() //... spectrumAnalyzer = SpectrumAnalyzer(bufferSize: 1024, downsampleFactor: 10) //... setupAudioEngineTap() } //... private func setupAudioEngineTap() { audioEngine.mainMixerNode.installTap(onBus: 0, bufferSize: AVAudioFrameCount(spectrumAnalyzer.bufferSize), format: audioEngine.mainMixerNode.outputFormat(forBus: 0)) { [weak self] (buffer, time) in guard let self = self else { return } let magnitudes = self.spectrumAnalyzer.analyze(buffer: buffer) DispatchQueue.main.async { if self.isPlaying { //print(\u0026#34;\\(magnitudes)\\n\\n\\n\u0026#34;) self.onSpectrumDataAvailable?(magnitudes) } } } } //... } 创建频谱显示视图 # 创建一个 VisualizerView 类，用于绘制频谱柱状图。\n在 updateUI 方法中调用 VisualizerView 的更新方法。\nimport UIKit class VisualizerView: UIView { private var magnitudes: [Float] = [] override init(frame: CGRect) { super.init(frame: frame) self.backgroundColor = .black // 设置背景颜色 } required init?(coder: NSCoder) { super.init(coder: coder) self.backgroundColor = .black // 设置背景颜色 } func update(with magnitudes: [Float]) { self.magnitudes = magnitudes setNeedsDisplay() } override func draw(_ rect: CGRect) { guard !magnitudes.isEmpty else { return } let context = UIGraphicsGetCurrentContext() context?.clear(rect) let barWidth = rect.width / CGFloat(magnitudes.count) for (index, magnitude) in magnitudes.enumerated() { let barHeight = CGFloat(magnitude) * rect.height let barRect = CGRect(x: CGFloat(index) * barWidth, y: rect.height - barHeight, width: barWidth, height: barHeight) context?.setFillColor(UIColor.green.cgColor) // 设置填充颜色 context?.fill(barRect) } // 添加调试日志 //print(\u0026#34;Drawing \\(magnitudes.count) bars\u0026#34;) } } 将频谱数据添加到界面 # 在视图控制器中添加 VisualizerView 并将频谱数据传递给它\nimport UIKit class ViewController: UIViewController { private var visualizerView: VisualizerView! lazy var audioEnginePlayer = AudioEnginePlayer() override func viewDidLoad() { super.viewDidLoad() visualizerView = VisualizerView(frame: CGRectMake(0, 0, view.bounds.width, 300)) view.addSubview(visualizerView) view.sendSubviewToBack(visualizerView) audioEnginePlayer.onSpectrumDataAvailable = { [weak self] magnitudes in //print(magnitudes) self?.visualizerView.update(with: magnitudes) } } } ","date":"17 August 2024","externalUrl":null,"permalink":"/posts/ios/audioengine/","section":"Posts","summary":"AVAudioEngine 是 AVFoundation 框架中的核心类，用于构建音频处理图，即一系列音频单元的连接，可以实现复杂的音频处理任务。","title":"AVAudioEngine详解","type":"posts"},{"content":"","date":"21 July 2024","externalUrl":null,"permalink":"/tags/cocoapods/","section":"Tags","summary":"","title":"Cocoapods","type":"tags"},{"content":" 一、Hosts配置 # 1.1 从Finder中配置显示Macintosh HD和用户目录 # 英文：打开Finder，点击顶部菜单Finder-\u0026gt;Settings\n中文：打开访达，点击顶部菜单访达-\u0026gt;设置-\u0026gt;边栏-\u0026gt;勾选硬盘-\u0026gt;勾选用户目录(房子图标)\n1.2 修改配置 /private/etc/Hosts # 进入Macintosh HD后，默认是看不到/private/etc/Hosts， 因为这些事系统的隐藏系统文件，按Command + Shift + . 组合命令，显示或隐藏文件。 找到/private/etc/Hosts，将Hosts文件复制到桌面再进行修改。\n## ##Host Database # ##localhost is used to configure the loopback interface ##when the system is booting. Do not change this entry. ## 127.0.0.1 localhost 255.255.255.255 broadcasthost ::1 localhost ##GitHub Start 140.82.114.4 github.com 140.82.114.20 gist.github.com 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.184.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.184.133 avatars0.githubusercontent.com 199.232.68.133 avatars0.githubusercontent.com 199.232.28.133 avatars1.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 199.232.28.133 avatars2.githubusercontent.com 151.101.184.133 avatars3.githubusercontent.com 199.232.68.133 avatars3.githubusercontent.com 151.101.184.133 avatars4.githubusercontent.com 199.232.68.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 199.232.68.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 199.232.68.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 199.232.68.133 avatars7.githubusercontent.com 151.101.184.133 avatars8.githubusercontent.com 199.232.68.133 avatars8.githubusercontent.com ##GitHub End 主要是将##GitHub Start 到 ##GitHub End的内容添加进去，保存以后，在将Host文件复制替换到/private/etc/Hosts。\n二、Git安装 # 官方网站：https://www.git-scm.com/download/\n如果是iOS开发者，可以先装一个xcode，自带git环境安装。\n默认系统是没有git的，我们也可以手动先安装一个。\n我是macOS系统，https://www.git-scm.com/download/mac\n这里有很多种方式，我们选择Binary installer二进制安装文件，点击installer，进入https://sourceforge.net/projects/git-osx-installer/files/，选择最新的版本2.33.0。\n下载安装即可。\n三、Homebrew安装 # Homebrew官网： https://brew.sh/\n打开终端命令输入：\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026#34; 或使用国内镜像更快\n/bin/zsh -c \u0026#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026#34; 如果失败多试几次，可能是你的网络问题，安装完成以后命令行输入：brew -v ，查看homebrew版本看看是否安装成功。\n四、Ruby安装 # Ruby官网： https://www.ruby-lang.org/zh_cn/downloads/\nRVM方式安装 # RVM（Ruby Version Manager）是一个命令行工具，用于管理多个 Ruby 版本和 Gem 集。它允许你在同一台机器上安装、管理和切换不同的 Ruby 版本，并为每个项目创建独立的 Gem 环境。\n安装命令 curl -L https://get.rvm.io | bash -s stable 载入RVM环境 source ~/.rvm/scripts/rvm 查看rvm版本 rvm -v 能输出版本信息说明安装完成。\n列出已知版本 rvm list known 安装指定ruby版本 rvm install 3.0.0 查看ruby版本信息 xiaopin@PPM2-MacBook-Air ~ % ruby -v ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [arm64-darwin23]\n说明安装成功！\nbrew方式安装(推荐) # RVM方式好像停止更新一样，无法保持Ruby版本最新兼容，这次macOS 15.0系统，RVM方式的版本不兼容新系统。\n使用Brew安装最新的Ruby版本 brew install ruby 修改Shell配置文件, #Intel芯片(目前来说可以抛弃了，现在基本都是苹果芯片) echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/ruby/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile #苹果M系列芯片 echo \u0026#39;export PATH=\u0026#34;/opt/homebrew/opt/ruby/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc 也可以手动的的找到.zshrc文件，一般在 Users/用户名/.zshrc 目录下，用文本编辑器打开，在最后面加上\n#如果是RVM安装的会自动有这行，可以不管，也可以注释 export PATH=\u0026#34;$PATH:$HOME/.rvm/bin\u0026#34; #在后面加上这行，会自动的将默认环境指向homebrew的ruby版本 export PATH=\u0026#34;/opt/homebrew/opt/ruby/bin:$PATH\u0026#34; 验证安装 #查看默认ruby路径 which ruby #查看ruby版本 ruby -v #ruby 3.3.5 (2024-09-03 revision ef084cc8f4) [arm64-darwin24] 五、升级gem和更换镜像源 # Gems 是 Ruby 的包管理系统（RubyGems）用来分发和管理 Ruby 库和应用程序的包。Gems 可以包含库、应用程序、文档和其他资源，方便开发者在项目中使用和管理依赖。\n升级gem命令 sudo gem update --system 更换镜像源 ​ 移除旧源\ngem sources --remove https://rubygems.org/ ​ 添加新源\ngem sources -a https://gems.ruby-china.com ​ 查看镜像源信息\ngem sources -l 六、彻底卸载cocoapods # 卸载已有旧版本 sudo gem uninstall cocoapods 查看本地已安装的cocoapods依赖 gem list --local | grep cocoapods 显示如下:\ncocoapods (1.0.1)\ncocoapods-core (1.0.1)\ncocoapods-deintegrate (1.0.1)\ncocoapods-downloader (1.1.1)\ncocoapods-plugins (1.0.0)\ncocoapods-search (1.0.0)\ncocoapods-stats (1.0.0)\ncocoapods-trunk (1.0.0)\ncocoapods-try (1.1.0)\n逐个删除 sudo gem uninstall cocoapods-core sudo gem uninstall cocoapods-deintegrate sudo gem uninstall cocoapods-downloader sudo gem uninstall cocoapods-plugins sudo gem uninstall cocoapods-search ... 七、Cocoapods安装 # macOS 10.11以后系统的安装cocoapods 指令，可安装制定版本：\nsudo gem install -n /usr/local/bin cocoapods 或 sudo gem install -n /usr/local/bin cocoapods -v 1.9.2 安装完成后，查看一下版本\npod --version 八、pod search异常解决 # 尝试删除 rm ~/Library/Caches/CocoaPods/search_index.json 不行的话再逐步执行一下命令 cd ~/.cocoapods/repos pod repo remove master git clone https://github.com/CocoaPods/Specs.git master rm ~/Library/Caches/CocoaPods/search_index.json pod search afnetworking 九、Cocoapods国内镜像源\u0026amp;Github镜像源 # 查看本地源\npod repo master Type: git (remotes/origin/master) URL: https://github.com/CocoaPods/Specs.git Path: /Users/xiaopin/.cocoapods/repos/master 修改默认镜像\n国内网络限制，github源下载麻烦，可以切换默认master源 清华源：https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git gitee源：https://gitee.com/mirrors/CocoaPods-Specs.git\n官方cdn: https://cdn.cocoapods.org/\n以Gitee为例：\npod repo remove master pod repo add master https://gitee.com/mirrors/CocoaPods-Specs.git pod repo update 修改Podfile\nsource \u0026#39;https://gitee.com/mirrors/CocoaPods-Specs.git\u0026#39; 也可以用官方CDN源，Podfile文件默认不设置source(推荐)\nsource \u0026#39;https://cdn.cocoapods.org/\u0026#39; ","date":"21 July 2024","externalUrl":null,"permalink":"/posts/ios/cocoapods/","section":"Posts","summary":"如果你使用Cocoapods环境出现各种问题，可以参考这篇文章就能彻底解决。","title":"万能解决方案之彻底解决cocoapods环境问题","type":"posts"},{"content":"","date":"20 July 2024","externalUrl":null,"permalink":"/categories/macos/","section":"Categories","summary":"","title":"MacOS","type":"categories"},{"content":"","date":"20 July 2024","externalUrl":null,"permalink":"/tags/macos%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","section":"Tags","summary":"","title":"MacOS开发环境","type":"tags"},{"content":" 默认安装位置\u0026amp;自定义位置 # 默认安装位置：/usr/local/\nBrew默认安装位置：/opt/homebrew/\n自定义安装位置：/Users/xiaopin/dev/\n有些工具和包通过安装文件的方式安装的，可以自定义目录，但是需要自己配置环境变量，如果是用HomeBrew的，系统自定选择安装的默认位置。因为是考虑到有时候brew安装巨慢的时候，可以考虑手动官网下载安装程序进行安装。\nHosts配置 # 1.1 从Finder中配置显示Macintosh HD和用户目录 # 英文：打开Finder，点击顶部菜单Finder-\u0026gt;Settings\n中文：打开访达，点击顶部菜单访达-\u0026gt;设置-\u0026gt;边栏-\u0026gt;勾选硬盘-\u0026gt;勾选用户目录(房子图标)\n1.2 修改配置 /private/etc/Hosts # 进入Macintosh HD后，默认是看不到/private/etc/Hosts， 因为这些事系统的隐藏系统文件，按Command + Shift + . 组合命令，显示或隐藏文件。 找到/private/etc/Hosts，将Hosts文件复制到桌面再进行修改。\n## # Host Database # # localhost is used to configure the loopback interface # when the system is booting. Do not change this entry. ## 127.0.0.1 localhost 255.255.255.255 broadcasthost ::1 localhost # GitHub Start 140.82.114.4 github.com 140.82.114.20 gist.github.com 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.184.133 gist.githubusercontent.com 151.101.184.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.184.133 avatars0.githubusercontent.com 199.232.68.133 avatars0.githubusercontent.com 199.232.28.133 avatars1.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 199.232.28.133 avatars2.githubusercontent.com 151.101.184.133 avatars3.githubusercontent.com 199.232.68.133 avatars3.githubusercontent.com 151.101.184.133 avatars4.githubusercontent.com 199.232.68.133 avatars4.githubusercontent.com 151.101.184.133 avatars5.githubusercontent.com 199.232.68.133 avatars5.githubusercontent.com 151.101.184.133 avatars6.githubusercontent.com 199.232.68.133 avatars6.githubusercontent.com 151.101.184.133 avatars7.githubusercontent.com 199.232.68.133 avatars7.githubusercontent.com 151.101.184.133 avatars8.githubusercontent.com 199.232.68.133 avatars8.githubusercontent.com # GitHub End 主要是将# GitHub Start 到 # GitHub End的内容添加进去，保存以后，在将Host文件复制替换到/private/etc/Hosts。\nXcode安装 # 1.更新macOS最新系统\n桌面左上角苹果图标-\u0026gt;系统设置-\u0026gt;通用-\u0026gt;软件更新\n2.直接通过AppStore安装Xcode，会将git一起安装\nGit安装\u0026amp;配置 # Git官网： https://git-scm.com\n下载地址： https://git-scm.com/download/mac\n如果安装了Xcode这个就不需要手动再次安装了，如果没有安装Xcode，就手动安装Binary installer\n取消代理设置：\ngit config --global unset http.proxy git config --global unset https.proxy HomeBrew安装\u0026amp;配置 # Homebrew官网\n打开终端命令输入：\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026#34; 或使用国内镜像更快\n/bin/zsh -c \u0026#34;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\u0026#34; 如果失败多试几次，可能是你的网络问题，安装完成以后命令行输入：brew -v ，查看homebrew版本看看是否安装成功。\nRuby安装\u0026amp;配置 # 一般情况下，macOS默认会安装ruby，版本可能不是最新的\n官方网站：https://www.ruby-lang.org/zh_cn/downloads/\n使用Brew安装最新的Ruby版本 brew install ruby 修改Shell配置文件, #Intel芯片(目前来说可以抛弃了，现在基本都是苹果芯片) echo \u0026#39;export PATH=\u0026#34;/usr/local/opt/ruby/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile #苹果M系列芯片 echo \u0026#39;export PATH=\u0026#34;/opt/homebrew/opt/ruby/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc 也可以手动的的找到.zshrc文件，一般在 Users/用户名/.zshrc 目录下，用文本编辑器打开，在最后面加上\n#如果是RVM安装的会自动有这行，可以不管，也可以注释 export PATH=\u0026#34;$PATH:$HOME/.rvm/bin\u0026#34; #在后面加上这行，会自动的将默认环境指向homebrew的ruby版本 export PATH=\u0026#34;/opt/homebrew/opt/ruby/bin:$PATH\u0026#34; 验证安装 #查看默认ruby路径 which ruby #查看ruby版本 ruby -v 也可以通过 rbenv 和 rvm 方式安装，之前一直用的rvm，但是rvm更新较慢，无法保证是最新的ruby版本。只要那种方式能安装最新的，就用哪种。\nCocoapods安装\u0026amp;配置 # 升级gem和更换镜像源 Gems 是 Ruby 的包管理系统（RubyGems）用来分发和管理 Ruby 库和应用程序的包。Gems 可以包含库、应用程序、文档和其他资源，方便开发者在项目中使用和管理依赖。\n升级gem命令 sudo gem update --system 更换镜像源 ​ 移除旧源\ngem sources --remove https://rubygems.org/ ​ 添加新源\ngem sources -a https://gems.ruby-china.com ​ 查看镜像源信息\ngem sources -l 彻底卸载cocoapods 卸载已有旧版本 sudo gem uninstall cocoapods 查看本地已安装的cocoapods依赖 gem list --local | grep cocoapods 显示如下:\ncocoapods (1.0.1)\ncocoapods-core (1.0.1)\ncocoapods-deintegrate (1.0.1)\ncocoapods-downloader (1.1.1)\ncocoapods-plugins (1.0.0)\ncocoapods-search (1.0.0)\ncocoapods-stats (1.0.0)\ncocoapods-trunk (1.0.0)\ncocoapods-try (1.1.0)\n逐个删除 sudo gem uninstall cocoapods-core sudo gem uninstall cocoapods-deintegrate sudo gem uninstall cocoapods-downloader sudo gem uninstall cocoapods-plugins sudo gem uninstall cocoapods-search ... Cocoapods安装 macOS 10.11以后系统的安装cocoapods 指令，可安装制定版本：\nsudo gem install -n /usr/local/bin cocoapods 或 sudo gem install -n /usr/local/bin cocoapods -v 1.9.2 安装完成后，查看一下版本\npod --version Flutter安装\u0026amp;配置 # 前提: 安装配置了上面的环境后\n下载SDK: https://docs.flutter.cn/release/archive\n解压到自定义目录下：/Users/xiaopin/dev/目录下后为：/Users/xiaopin/dev/flutter\n将配置添加到~/.zshrc\nexport PATH=/Users/xiaopin/dev/flutter/bin:$PATH export PUB_HOSTED_URL=https://pub.flutter-io.cn export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn 运行命令查看\nflutter doctor Go安装\u0026amp;配置 # 安装配置 # 官网下载\nhttps://go.dev/dl/，官方都是通过安装包方式安装的。对于开发环境来说可以。如果是服务器环境的话采用docker方式，命令行方式。\n安装程序安装\n到官网地址下载最新的安装程序包以后，根据步骤安装，默认自动安装到 /usr/local/go 路径下，同时会自动的将 /usr/local/go/bin 添加到环境变量中。在命令行中查看版本验证是否正常安装：\ngo version #go version go1.22.5 darwin/arm64 命令安装\ndocker安装\n常用命令 # 其他插件的安装配置 # dlv\ngoctl\ngopls\nprotoc\nProtoc-gen-go\nreverse\nxorm\n\u0026hellip;.\nmysql安装\u0026amp;配置 # Nodejs安装\u0026amp;配置 # 安装配置 # 官方网站下载安装教程\nhttps://nodejs.org/zh-cn/download/package-manager\n命令安装\n# NOTE: # Homebrew is not a Node.js package manager. Please ensure it is already installed # on your system. Follow official instructions at https://brew.sh/ # Homebrew only supports installing major Node.js versions and might not support # the latest Node.js version from the 20 release line. # download and install Node.js brew install node@20 # verifies the right Node.js version is in the environment node -v # should print `v20.15.1` # verifies the right NPM version is in the environment npm -v # should print `10.7.0` 安装程序安装\n默认安装目录\n• Node.js v20.15.1 to /usr/local/bin/node • npm v10.7.0 to /usr/local/bin/npm\n方式方法有很多种，因为我用的是macOS环境，只列举macOS的安装配置教程。我采用了安装程序的方式。\n常用命令\nNode.js 命令 # node 启动 Node.js 解释器，可以直接执行 JavaScript 文件或进入 REPL（交互式解释器）模式。 示例：node app.js node --version 或 node -v 显示当前 Node.js 的版本信息。 node inspect \u0026lt;script\u0026gt; 使用调试器启动脚本。 node --inspect=\u0026lt;port\u0026gt; \u0026lt;script\u0026gt; 启动脚本并监听指定端口，用于远程调试。 npm 命令 # npm init 初始化一个 npm 项目，创建或更新 package.json 文件。 npm install 或 npm i 安装项目所需的依赖包，根据 package.json 和 package-lock.json 文件。 npm install \u0026lt;package\u0026gt; 或 npm i \u0026lt;package\u0026gt; 安装指定的包到项目中。 npm install \u0026lt;package\u0026gt; --save 或 npm i \u0026lt;package\u0026gt; -S 安装包并将它添加到 dependencies 列表中。 npm install \u0026lt;package\u0026gt; --save-dev 或 npm i \u0026lt;package\u0026gt; -D 安装包并将它添加到 devDependencies 列表中。 npm uninstall \u0026lt;package\u0026gt; 或 npm un \u0026lt;package\u0026gt; 卸载指定的包。 npm uninstall \u0026lt;package\u0026gt; --save 或 npm un \u0026lt;package\u0026gt; -S 卸载包并从 dependencies 中移除。 npm uninstall \u0026lt;package\u0026gt; --save-dev 或 npm un \u0026lt;package\u0026gt; -D 卸载包并从 devDependencies 中移除。 npm update 更新所有已安装的包到最新版本。 npm update \u0026lt;package\u0026gt; 更新指定的包到最新版本。 npm outdated 显示哪些已安装的包有更新的版本。 npm list 或 npm ls 列出所有已安装的包及其版本。 npm publish 发布当前项目到 npm 仓库。 npm run \u0026lt;script\u0026gt; 执行 package.json 文件中定义的脚本。 npm start 运行 package.json 文件中定义的 start 脚本。 npm test 运行 package.json 文件中定义的 test 脚本。 npm config get prefix 显示全局包的安装前缀。 npm config set prefix \u0026lt;path\u0026gt; 设置全局包的安装前缀。 npm cache clean 清理 npm 缓存。 npm help 显示帮助信息。 以上命令覆盖了 Node.js 和 npm 的大部分日常使用场景，从项目初始化到包管理，再到运行和调试应用程序。\npnpm安装和使用 # pnpm 是一个高性能的包管理器，用于 Node.js 项目，它提供了比 npm 和 yarn 更快的速度和更少的磁盘空间占用。要在你的系统上安装 pnpm，你可以遵循以下步骤：\n对于 Linux 和 macOS 用户 # 确保 Node.js 已经安装 在开始之前，你需要确保你的机器上已经安装了 Node.js 和 npm，因为 pnpm 是通过 npm 安装的。\n全局安装 pnpm 在你的终端中运行以下命令来全局安装 pnpm：\nsudo npm install -g pnpm 验证 pnpm 安装 安装完成后，你可以通过运行以下命令来确认 pnpm 是否成功安装：\npnpm --version 如果安装成功，该命令将显示你安装的 pnpm 的版本号。\nPython安装\u0026amp;配置 # ","date":"20 July 2024","externalUrl":null,"permalink":"/posts/ios/macos_dev_env/","section":"Posts","summary":"macOS开发环境的安装和配置","title":"macOS开发环境的安装和配置","type":"posts"},{"content":"个人信息展示\n","date":"1 July 2024","externalUrl":null,"permalink":"/about/","section":"PPSW.ASIA","summary":"","title":"About","type":"page"},{"content":"HelloApp base on Flutter. Support Android, iOS, Web, macOS, Windows\n","date":"17 June 2024","externalUrl":null,"permalink":"/portfolio/hello_app/","section":"Portfolio","summary":"HelloApp base on Flutter. Support Android, iOS, Web, macOS, Windows","title":"HelloApp","type":"portfolio"},{"content":"参与作品和独立开发作品广泛，涉及：资讯，社交，电商，即时通讯，音视频，企业级领域。\n","date":"17 June 2024","externalUrl":null,"permalink":"/portfolio/","section":"Portfolio","summary":"","title":"Portfolio","type":"portfolio"},{"content":"","date":"17 June 2024","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":" 安装Git # \u0026hellip;\n命令模式 # 初始化和推送 # # 1. 初始化 Git 仓库 git init # 2. 添加所有文件到暂存区 git add . # 3. 提交更改 git commit -m \u0026#34;Initial commit\u0026#34; # 4. 添加远程仓库（将 \u0026lt;your-repo-url\u0026gt; 替换为你的 GitHub 仓库 URL） git remote add origin https://github.com/ppswdev/pp_kits.git # 5. 推送到远程仓库 git push -u origin master # 查看当前分支名称 git branch # 如果当前分支是 main，推送到 main git push -u origin main # 如果需要重命名分支为 master git branch -M master git push -u origin master #如果已经存在远程仓库, 删除现有的 origin 远程仓库 git remote remove origin # 重新添加新的远程仓库 git remote add origin https://github.com/ppswdev/pp_kits.git # 推送到远程仓库 git push -u origin main 分支操作 # 创建分支 # # 创建本地分支 git branch feature-branch # 创建并切换到新的本地分支 git checkout -b feature-branch # 从远程分支创建并切换到新的本地分支 # 假设远程分支名为 origin/feature-branch git checkout -b feature-branch origin/feature-branch 查看分支 # # 查看本地和远程分支 git branch -a # 只查看远程分支 git branch -r 修改分支 # 删除分支 # # 删除本地分支 git branch -d \u0026lt;branch_name\u0026gt; # 强制删除本地分支（如果分支没有被合并） git branch -D \u0026lt;branch_name\u0026gt; # 删除远程分支 git push origin --delete \u0026lt;branch_name\u0026gt; 汇总(待整理) # # 初始化一个新的Git仓库 git init # 克隆一个远程仓库 git clone \u0026lt;repository_url\u0026gt; # 查看当前仓库的状态 git status # 添加文件到暂存区 git add \u0026lt;file_name\u0026gt; git add . # 添加所有文件 # 提交暂存区的文件到本地仓库 git commit -m \u0026#34;提交信息\u0026#34; # 查看提交历史 git log # 查看简洁的提交历史 git log --oneline # 创建一个新的分支 git branch \u0026lt;branch_name\u0026gt; # 切换到指定分支 git checkout \u0026lt;branch_name\u0026gt; # 创建并切换到新的分支 git checkout -b \u0026lt;branch_name\u0026gt; # 合并指定分支到当前分支 git merge \u0026lt;branch_name\u0026gt; # 删除分支 git branch -d \u0026lt;branch_name\u0026gt; # 查看所有分支 git branch -a # 添加远程仓库 git remote add origin \u0026lt;repository_url\u0026gt; # 查看远程仓库 git remote -v # 推送本地分支到远程仓库 git push origin \u0026lt;branch_name\u0026gt; # 推送所有分支到远程仓库 git push --all origin # 拉取远程仓库的更新 git pull # 查看远程仓库的分支 git branch -r # 删除远程分支 git push origin --delete \u0026lt;branch_name\u0026gt; # 查看文件的修改历史 git log -p \u0026lt;file_name\u0026gt; # 显示某个文件的历史版本 git show \u0026lt;commit_id\u0026gt;:\u0026lt;file_name\u0026gt; # 恢复工作区的文件到暂存区的状态 git checkout -- \u0026lt;file_name\u0026gt; # 恢复暂存区的文件到上一次提交的状态 git reset HEAD \u0026lt;file_name\u0026gt; # 撤销上一次的提交，但保留提交的内容 git reset --soft HEAD^ # 撤销上一次的提交，并删除提交的内容 git reset --hard HEAD^ # 暂存当前的修改 git stash # 恢复暂存的修改 git stash pop # 查看暂存的修改 git stash list # 删除暂存的修改 git stash drop 软件模式 # SourceTree # Github Desktop # ","date":"17 June 2024","externalUrl":null,"permalink":"/posts/git/use/","section":"Posts","summary":"","title":"Git入门教程","type":"posts"},{"content":"","date":"17 June 2024","externalUrl":null,"permalink":"/categories/tools/","section":"Categories","summary":"","title":"Tools","type":"categories"},{"content":"","date":"17 June 2024","externalUrl":null,"permalink":"/agreements/","section":"Agreements","summary":"","title":"Agreements","type":"agreements"},{"content":"This End User License Agreement (\u0026ldquo;Agreement\u0026rdquo;) is a legal agreement between you (\u0026ldquo;User\u0026rdquo; or \u0026ldquo;you\u0026rdquo;) and [Your Company Name] (\u0026ldquo;Company,\u0026rdquo; \u0026ldquo;we,\u0026rdquo; \u0026ldquo;us,\u0026rdquo; or \u0026ldquo;our\u0026rdquo;) for the use of \u0026ldquo;HelloApp\u0026rdquo; (\u0026ldquo;Software\u0026rdquo;). By installing, copying, or otherwise using the Software, you agree to be bound by the terms of this Agreement.\n1. License Grant # Subject to the terms and conditions of this Agreement, the Company grants you a limited, non-exclusive, non-transferable, revocable license to use the Software solely for your personal or internal business purposes.\n2. Restrictions # You agree not to:\nCopy, modify, or create derivative works of the Software; Distribute, transfer, sublicense, lease, lend, or rent the Software to any third party; Reverse engineer, decompile, or disassemble the Software, except to the extent expressly permitted by applicable law; Remove, alter, or obscure any proprietary notices or labels on the Software. 3. Ownership # The Software is licensed, not sold. The Company retains all right, title, and interest in and to the Software, including all intellectual property rights therein.\n4. Updates # The Company may provide updates, upgrades, or enhancements to the Software. Any such updates, upgrades, or enhancements shall be deemed part of the Software and subject to the terms of this Agreement.\n5. Termination # This Agreement is effective until terminated. Your rights under this Agreement will terminate automatically without notice if you fail to comply with any term(s) of this Agreement. Upon termination, you must cease all use of the Software and destroy all copies of the Software in your possession or control.\n6. Disclaimer of Warranties # The Software is provided \u0026ldquo;AS IS\u0026rdquo; without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. The Company does not warrant that the Software will meet your requirements or that the operation of the Software will be uninterrupted or error-free.\n7. Limitation of Liability # To the maximum extent permitted by applicable law, in no event shall the Company be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data, or other information, for business interruption, for personal injury, for loss of privacy) arising out of or in any way related to the use of or inability to use the Software, even if the Company has been advised of the possibility of such damages.\n8. Governing Law # This Agreement shall be governed by and construed in accordance with the laws of [Your Jurisdiction], without regard to its conflict of law principles.\n9. Entire Agreement # This Agreement constitutes the entire agreement between you and the Company concerning the Software and supersedes all prior or contemporaneous understandings regarding such subject matter. No amendment to or modification of this Agreement will be binding unless in writing and signed by the Company.\n10. Contact Information # If you have any questions about this Agreement, please contact us at:\nEmail: service@ppsw.asia\nThank you for using our software. We hope you have a great experience.\n","date":"17 June 2024","externalUrl":null,"permalink":"/agreements/eula/hello_app/","section":"Agreements","summary":"","title":"End User License Agreement (EULA)","type":"agreements"},{"content":"Git安装教程\n","date":"17 June 2024","externalUrl":null,"permalink":"/posts/git/started/","section":"Posts","summary":"","title":"Git安装","type":"posts"},{"content":"We highly value your privacy and are committed to protecting your personal information. This privacy policy explains how we collect, use, disclose, and protect your information.\nInformation Collection # We may collect the following types of information:\nPersonal Information: When you register an account, subscribe to our services, or contact us, we may collect personal information such as your name, email address, and phone number. Usage Data: We may automatically collect information about how you access and use our services, such as your IP address, browser type, access times, and pages visited. Information Use # We use the collected information to:\nProvide and maintain our services; Improve and personalize your user experience; Process your transactions and send related information; Communicate with you, including responding to your inquiries and providing customer support; Analyze usage trends and monitor the usage of our services. Information Disclosure # We do not sell, trade, or rent your personal information to third parties. We may disclose your information in the following circumstances:\nLegal Requirements: We may disclose your information if required by law or in response to legal processes. Protection of Rights: We may disclose your information to protect our rights, privacy, safety, or property, and that of our users or the public. Information Protection # We take reasonable measures to protect your information from unauthorized access, use, or disclosure. However, no method of internet transmission or electronic storage is completely secure, and we cannot guarantee absolute security.\nYour Rights # Depending on applicable privacy laws, you may have the following rights:\nAccess and update your personal information; Request the deletion of your personal information; Withdraw your consent to our processing of your personal information; Lodge a complaint. Changes to This Privacy Policy # We may update this privacy policy from time to time. We will post any changes on this page and notify you of any significant changes by email or through a prominent notice on our website before the changes take effect.\nContact Us # If you have any questions or concerns about this privacy policy, please contact us at:\nEmail: service@ppsw.asia\nThank you for reading our privacy policy. We are committed to protecting your privacy and hope you feel safe and secure when using our services.\n","date":"17 June 2024","externalUrl":null,"permalink":"/agreements/privacy/","section":"Agreements","summary":"","title":"Privacy Policy","type":"agreements"},{"content":"These Terms of Service (\u0026ldquo;Terms\u0026rdquo;) are a legal agreement between you (\u0026ldquo;User\u0026rdquo; or \u0026ldquo;you\u0026rdquo;) and PPSW.ASIA (\u0026ldquo;Company,\u0026rdquo; \u0026ldquo;we,\u0026rdquo; \u0026ldquo;us,\u0026rdquo; or \u0026ldquo;our\u0026rdquo;) governing your use of our services (\u0026ldquo;Services\u0026rdquo;). By accessing or using our Services, you agree to be bound by these Terms.\n1. Acceptance of Terms # By accessing or using our Services, you agree to comply with and be bound by these Terms and all applicable laws and regulations. If you do not agree to these Terms, you must not use our Services.\n2. Changes to Terms # We reserve the right to modify these Terms at any time. We will notify you of any changes by posting the new Terms on our website. Your continued use of the Services after the changes have been posted will constitute your acceptance of the new Terms.\n3. Use of Services # You agree to use the Services only for lawful purposes and in accordance with these Terms. You agree not to:\nUse the Services in any way that violates any applicable federal, state, local, or international law or regulation; Engage in any conduct that restricts or inhibits anyone\u0026rsquo;s use or enjoyment of the Services, or which, as determined by us, may harm the Company or users of the Services; Use the Services in any manner that could disable, overburden, damage, or impair the Services or interfere with any other party\u0026rsquo;s use of the Services. 4. Account Registration # To access certain features of the Services, you may be required to register for an account. You agree to provide accurate, current, and complete information during the registration process and to update such information to keep it accurate, current, and complete. You are responsible for safeguarding your account information and for any activities or actions under your account.\n5. Intellectual Property # The Services and their entire contents, features, and functionality (including but not limited to all information, software, text, displays, images, and audio) are owned by the Company, its licensors, or other providers of such material and are protected by copyright, trademark, patent, trade secret, and other intellectual property or proprietary rights laws.\n6. Termination # We may terminate or suspend your access to the Services immediately, without prior notice or liability, for any reason whatsoever, including without limitation if you breach the Terms. Upon termination, your right to use the Services will immediately cease.\n7. Limitation of Liability # To the fullest extent permitted by applicable law, in no event shall the Company, its affiliates, directors, employees, or agents be liable for any indirect, incidental, special, consequential, or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your use or inability to use the Services; (ii) any unauthorized access to or use of our servers and/or any personal information stored therein; (iii) any interruption or cessation of transmission to or from the Services; (iv) any bugs, viruses, trojan horses, or the like that may be transmitted to or through our Services by any third party; (v) any errors or omissions in any content or for any loss or damage incurred as a result of the use of any content posted, emailed, transmitted, or otherwise made available through the Services; and/or (vi) the defamatory, offensive, or illegal conduct of any third party. In no event shall the Company’s aggregate liability exceed the amount paid by you, if any, for accessing the Services.\n8. Governing Law # These Terms shall be governed and construed in accordance with the laws of [Your Jurisdiction], without regard to its conflict of law provisions.\n9. Changes to Terms # We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will provide at least 30 days\u0026rsquo; notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion.\n10. Contact Us # If you have any questions about these Terms, please contact us at:\nEmail: service@ppsw.asia\nThank you for using our services. We hope you have a great experience.\n","date":"17 June 2024","externalUrl":null,"permalink":"/agreements/termsofuse/","section":"Agreements","summary":"","title":"Terms of use","type":"agreements"},{"content":"HelloApp Admin Web\n","date":"17 May 2024","externalUrl":null,"permalink":"/portfolio/hello_admin/","section":"Portfolio","summary":"HelloApp Admin Web","title":"HelloApp Admin Web","type":"portfolio"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"When the work is tired, let\u0026rsquo;s take a break, listen to music in the rest area, look at beautiful women, and combine work and rest!\n","externalUrl":null,"permalink":"/lounge/","section":"Lounge","summary":"","title":"Lounge","type":"lounge"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]